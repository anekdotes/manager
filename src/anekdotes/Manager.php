<?php namespace Anekdotes\Manager;
use Closure; use Imagine\Image\ImageInterface; use Imagine\Image\Box; use Anekdotes\File\File; use Anekdotes\Manager\Image;

class Manager {

  protected static $exts = array('jpg', 'png', 'jpeg');
  protected static $path = 'uploads/';
  protected static $weight = 3000000;
  protected static $size = null;
  protected static $prefix = 'public/';
  public $success = false;

  public function __construct($options = array()) {
    if (isset($options['exts']))
     self::$exts = $options['exts'];
    if (isset($options['path']))
     self::$path = $options['path'];
    if (isset($options['weight']))
     self::$weight = $options['weight'];
    if (isset($options['size']))
     self::$size = $options['size'];
    if (isset($options['prefix']))
     self::$prefix = $options['prefix'];
  }

  public function manage($fileInfo, Closure $uploadCallback = null) {
    if (is_null($fileInfo['error']) || $fileInfo['error'] > 0){
      throw new Exception("Invalid image");
    }
    $fileInfo = array_merge($fileInfo, pathinfo($fileInfo['name']));
    $ext = strtolower($fileInfo['extension']);
    $tmpPath = $fileInfo['tmp_name'];

    //basic validation
    if ($fileInfo['size'] / 1000000 > self::$weight){
      throw new Exception("File is too big");
    }
    if (!in_array($ext, self::$exts)){
      throw new Exception("File extension is not supported");
    }

    $filename = date('YmdHis', time()) . ".jpg";
    $quality = 70;

    //there's a callback, execute the callback and return its value as new filename
    if ($uploadCallback){
      $filename = $uploadCallback();
    }
    $newPath = "./" . self::$prefix . self::$path . $filename;

    if (self::$size && is_array(self::$size)) {
      foreach (self::$size as $size => $config) {
        $newPath = self::$path . $size . '/';
        self::directorize($newPath);
        $newPath = "./" . self::$prefix . $newPath . $filename;
        $quality = isset($config['quality']) ? $config['quality'] : 75;
        self::upload($tmpPath, $newPath, $ext, $quality, function($picture) use ($config) {
          $size = $picture->getSize();
          switch ($config['resize']) {
            case 'widen':
              $picture = $picture->resize($size->widen($config['width']));
              break;
            case 'heighten':
              $picture = $picture->resize($size->heighten($config['height']));
              break;
            case 'max':
              if ($size->getWidth() > $config['width']) {
                $picture = $picture->resize($size->widen($config['width']));
              }
              if ($size->getHeight() > $config['height']) {
                $picture = $picture->resize($size->heighten($config['height']));
              }
              break;
          }
          if ($config['crop']) {
            $size = new Box($config['width'], $config['height']);
            $mode = ImageInterface::THUMBNAIL_OUTBOUND;
            $picture = $picture->thumbnail($size, $mode);
          }
          return $picture;
        });
      };
    }
    else{
      self::upload($tmpPath, $newPath, $ext, $quality);
    }
    return true;
  }

  public function upload($tmpPath, $newPath, $ext, $quality, Closure $imageCallback = null) {
    if ($imageCallback) {
      $file = Image::open($tmpPath);
      $file = $imageCallback($file);
      $tmpPath = $tmpPath . '.' . $ext;
      $file->save($tmpPath, array('quality' => $quality));
    }
    File::move($tmpPath, $newPath);
  }

  public function directorize($path){
    $folders = explode('/', $path);
    $pathbuild = "./" . self::$prefix;
    foreach ($folders as $folder) {
      $pathbuild .= "{$folder}/";
      $cond = File::exists($pathbuild) && File::isDirectory($pathbuild);
      if (! $cond){
        File::makeDirectory($pathbuild);
        File::put("{$pathbuild}.gitkeep", "Generated by `anekdotes/manager`");
      }
    }
  }
}
